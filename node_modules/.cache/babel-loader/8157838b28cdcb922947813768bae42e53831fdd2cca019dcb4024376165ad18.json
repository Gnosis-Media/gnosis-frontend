{"ast":null,"code":"var _jsxFileName = \"/Users/baby/react/gnosis-test/frontend/src/pages/UploadPage.js\",\n  _s = $RefreshSig$();\n// src/pages/UploadPage.js\nimport React, { useState } from 'react';\nimport './UploadPage.css'; // Import the CSS file for styling\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction UploadPage() {\n  _s();\n  const [content, setContent] = useState(null);\n  const [preview, setPreview] = useState(''); // Store the file preview (text or name)\n  const [message, setMessage] = useState(''); // Store any messages (success/error)\n\n  const handleFileChange = e => {\n    const file = e.target.files[0];\n    setContent(file);\n    if (file) {\n      if (file.type === 'text/plain' || file.type === 'application/pdf') {\n        // For text-based files, read the content to preview\n        const reader = new FileReader();\n        reader.onload = () => {\n          setPreview(reader.result.substring(0, 500)); // Limit preview to first 500 characters\n        };\n        reader.readAsText(file);\n      } else {\n        // For other files, just show the name\n        setPreview(`Selected file: ${file.name}`);\n      }\n    }\n  };\n  const handleUpload = async e => {\n    e.preventDefault();\n    const formData = new FormData();\n    formData.append('file', content);\n    try {\n      const response = await fetch('http://localhost:5000/api/upload', {\n        // Ensure this points to your Flask server\n        method: 'POST',\n        body: formData\n      });\n      const data = await response.json();\n      if (response.ok) {\n        setMessage('File uploaded successfully!');\n        setPreview(data.preview); // Preview file content from server if available\n      } else {\n        setMessage(`Error: ${data.error}`);\n      }\n    } catch (error) {\n      setMessage('Upload failed. Please try again.');\n      console.error('Upload failed', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"upload-container\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"upload-card\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Upload Content\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleUpload,\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"file-upload\",\n          className: \"custom-file-upload\",\n          children: \"Choose File\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          id: \"file-upload\",\n          type: \"file\",\n          style: {\n            display: 'none'\n          } // Hide the default file input\n          ,\n          onChange: handleFileChange,\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          children: \"Upload\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }, this), message && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 21\n      }, this), preview && /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"File Preview:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: preview\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 5\n  }, this);\n}\n_s(UploadPage, \"mDoEDR5tEGmCULoMyQkAh1Bn554=\");\n_c = UploadPage;\nexport default UploadPage;\n\n/*\nimport React, { useState } from 'react';\nimport './UploadPage.css'; // Import the CSS file for styling\n\nfunction UploadPage() {\n  const [content, setContent] = useState(null);\n\n  const handleUpload = async (e) => {\n    e.preventDefault();\n    const formData = new FormData();\n    formData.append('file', content);\n\n    try {\n      const response = await fetch('https://api.example.com/upload', {\n        method: 'POST',\n        body: formData,\n      });\n      const data = await response.json();\n      if (data.success) {\n        // handle success (e.g., show confirmation)\n      } else {\n        // handle error (e.g., show error message)\n      }\n    } catch (error) {\n      console.error('Upload failed', error);\n    }\n  };\n\n  return (\n    <div className=\"upload-container\">\n      <div className=\"upload-card\">\n        <h2>Upload Content</h2>\n        <form onSubmit={handleUpload}>\n          <label htmlFor=\"file-upload\" className=\"custom-file-upload\">\n            Choose File\n          </label>\n          <input \n            id=\"file-upload\" \n            type=\"file\" \n            onChange={(e) => setContent(e.target.files[0])} \n            required \n          />\n          <button type=\"submit\">Upload</button>\n        </form>\n      </div>\n    </div>\n  );\n}\n\nexport default UploadPage;\n*/\n\n/*\nimport React, { useState } from 'react';\nimport './UploadPage.css'; // Import the CSS file for styling\n\nfunction UploadPage() {\n  const [content, setContent] = useState(null);\n\n  const handleUpload = async (e) => {\n    e.preventDefault();\n    const formData = new FormData();\n    formData.append('file', content);\n\n    try {\n      const response = await fetch('https://api.example.com/upload', {\n        method: 'POST',\n        body: formData,\n      });\n      const data = await response.json();\n      if (data.success) {\n        // handle success (e.g., show confirmation)\n      } else {\n        // handle error (e.g., show error message)\n      }\n    } catch (error) {\n      console.error('Upload failed', error);\n    }\n  };\n\n  return (\n    <div className=\"upload-container\">\n      <div className=\"upload-card\">\n        <h2>Upload Content</h2>\n        <form onSubmit={handleUpload}>\n          <input \n            type=\"file\" \n            onChange={(e) => setContent(e.target.files[0])} \n            required \n          />\n          <button type=\"submit\">Upload</button>\n        </form>\n      </div>\n    </div>\n  );\n}\n\nexport default UploadPage;\n\n\n\n\nimport React, { useState } from 'react';\n\nfunction UploadPage() {\n  const [file, setFile] = useState(null);\n\n  const handleFileUpload = async (e) => {\n    e.preventDefault();\n    const formData = new FormData();\n    formData.append('file', file);\n\n    const response = await fetch('https://api.example.com/upload', {\n      method: 'POST',\n      headers: { Authorization: `Bearer ${localStorage.getItem('token')}` },\n      body: formData,\n    });\n\n    const data = await response.json();\n    if (data.success) {\n      // handle success, maybe redirect to feed\n    } else {\n      // handle error\n    }\n  };\n\n  return (\n    <div>\n      <h2>Upload Content</h2>\n      <form onSubmit={handleFileUpload}>\n        <input \n          type=\"file\" \n          onChange={(e) => setFile(e.target.files[0])} \n        />\n        <button type=\"submit\">Upload</button>\n      </form>\n    </div>\n  );\n}\n\nexport default UploadPage;\n*/\nvar _c;\n$RefreshReg$(_c, \"UploadPage\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","UploadPage","_s","content","setContent","preview","setPreview","message","setMessage","handleFileChange","e","file","target","files","type","reader","FileReader","onload","result","substring","readAsText","name","handleUpload","preventDefault","formData","FormData","append","response","fetch","method","body","data","json","ok","error","console","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","htmlFor","id","style","display","onChange","required","_c","$RefreshReg$"],"sources":["/Users/baby/react/gnosis-test/frontend/src/pages/UploadPage.js"],"sourcesContent":["// src/pages/UploadPage.js\nimport React, { useState } from 'react';\nimport './UploadPage.css'; // Import the CSS file for styling\n\nfunction UploadPage() {\n  const [content, setContent] = useState(null);\n  const [preview, setPreview] = useState(''); // Store the file preview (text or name)\n  const [message, setMessage] = useState(''); // Store any messages (success/error)\n\n  const handleFileChange = (e) => {\n    const file = e.target.files[0];\n    setContent(file);\n\n    if (file) {\n      if (file.type === 'text/plain' || file.type === 'application/pdf') {\n        // For text-based files, read the content to preview\n        const reader = new FileReader();\n        reader.onload = () => {\n          setPreview(reader.result.substring(0, 500)); // Limit preview to first 500 characters\n        };\n        reader.readAsText(file);\n      } else {\n        // For other files, just show the name\n        setPreview(`Selected file: ${file.name}`);\n      }\n    }\n  };\n\n  const handleUpload = async (e) => {\n    e.preventDefault();\n\n    const formData = new FormData();\n    formData.append('file', content);\n\n    try {\n      const response = await fetch('http://localhost:5000/api/upload', { // Ensure this points to your Flask server\n        method: 'POST',\n        body: formData,\n      });\n\n      const data = await response.json();\n      if (response.ok) {\n        setMessage('File uploaded successfully!');\n        setPreview(data.preview); // Preview file content from server if available\n      } else {\n        setMessage(`Error: ${data.error}`);\n      }\n    } catch (error) {\n      setMessage('Upload failed. Please try again.');\n      console.error('Upload failed', error);\n    }\n  };\n\n  return (\n    <div className=\"upload-container\">\n      <div className=\"upload-card\">\n        <h2>Upload Content</h2>\n        <form onSubmit={handleUpload}>\n          {/* Custom-styled button for file selection */}\n          <label htmlFor=\"file-upload\" className=\"custom-file-upload\">\n            Choose File\n          </label>\n\n          {/* Hidden file input */}\n          <input\n            id=\"file-upload\"\n            type=\"file\"\n            style={{ display: 'none' }} // Hide the default file input\n            onChange={handleFileChange}\n            required\n          />\n\n          <button type=\"submit\">Upload</button>\n        </form>\n\n        {/* Display message */}\n        {message && <p>{message}</p>}\n\n        {/* Display file preview */}\n        {preview && (\n          <div>\n            <h3>File Preview:</h3>\n            <p>{preview}</p>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default UploadPage;\n\n\n\n\n/*\nimport React, { useState } from 'react';\nimport './UploadPage.css'; // Import the CSS file for styling\n\nfunction UploadPage() {\n  const [content, setContent] = useState(null);\n\n  const handleUpload = async (e) => {\n    e.preventDefault();\n    const formData = new FormData();\n    formData.append('file', content);\n\n    try {\n      const response = await fetch('https://api.example.com/upload', {\n        method: 'POST',\n        body: formData,\n      });\n      const data = await response.json();\n      if (data.success) {\n        // handle success (e.g., show confirmation)\n      } else {\n        // handle error (e.g., show error message)\n      }\n    } catch (error) {\n      console.error('Upload failed', error);\n    }\n  };\n\n  return (\n    <div className=\"upload-container\">\n      <div className=\"upload-card\">\n        <h2>Upload Content</h2>\n        <form onSubmit={handleUpload}>\n          <label htmlFor=\"file-upload\" className=\"custom-file-upload\">\n            Choose File\n          </label>\n          <input \n            id=\"file-upload\" \n            type=\"file\" \n            onChange={(e) => setContent(e.target.files[0])} \n            required \n          />\n          <button type=\"submit\">Upload</button>\n        </form>\n      </div>\n    </div>\n  );\n}\n\nexport default UploadPage;\n*/\n\n/*\nimport React, { useState } from 'react';\nimport './UploadPage.css'; // Import the CSS file for styling\n\nfunction UploadPage() {\n  const [content, setContent] = useState(null);\n\n  const handleUpload = async (e) => {\n    e.preventDefault();\n    const formData = new FormData();\n    formData.append('file', content);\n\n    try {\n      const response = await fetch('https://api.example.com/upload', {\n        method: 'POST',\n        body: formData,\n      });\n      const data = await response.json();\n      if (data.success) {\n        // handle success (e.g., show confirmation)\n      } else {\n        // handle error (e.g., show error message)\n      }\n    } catch (error) {\n      console.error('Upload failed', error);\n    }\n  };\n\n  return (\n    <div className=\"upload-container\">\n      <div className=\"upload-card\">\n        <h2>Upload Content</h2>\n        <form onSubmit={handleUpload}>\n          <input \n            type=\"file\" \n            onChange={(e) => setContent(e.target.files[0])} \n            required \n          />\n          <button type=\"submit\">Upload</button>\n        </form>\n      </div>\n    </div>\n  );\n}\n\nexport default UploadPage;\n\n\n\n\nimport React, { useState } from 'react';\n\nfunction UploadPage() {\n  const [file, setFile] = useState(null);\n\n  const handleFileUpload = async (e) => {\n    e.preventDefault();\n    const formData = new FormData();\n    formData.append('file', file);\n\n    const response = await fetch('https://api.example.com/upload', {\n      method: 'POST',\n      headers: { Authorization: `Bearer ${localStorage.getItem('token')}` },\n      body: formData,\n    });\n\n    const data = await response.json();\n    if (data.success) {\n      // handle success, maybe redirect to feed\n    } else {\n      // handle error\n    }\n  };\n\n  return (\n    <div>\n      <h2>Upload Content</h2>\n      <form onSubmit={handleFileUpload}>\n        <input \n          type=\"file\" \n          onChange={(e) => setFile(e.target.files[0])} \n        />\n        <button type=\"submit\">Upload</button>\n      </form>\n    </div>\n  );\n}\n\nexport default UploadPage;\n*/"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}