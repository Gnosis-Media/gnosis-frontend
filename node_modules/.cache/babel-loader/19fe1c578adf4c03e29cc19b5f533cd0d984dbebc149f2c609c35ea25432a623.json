{"ast":null,"code":"var _jsxFileName = \"/Users/baby/react/gnosis-test/src/pages/FeedPage.js\",\n  _s = $RefreshSig$();\n// src/pages/FeedPage.js\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction FeedPage() {\n  _s();\n  const [feed, setFeed] = useState(null); // Feed starts as null, simulating no database connection\n\n  useEffect(() => {\n    // Simulate a failed database connection or no data fetched\n    const fetchFeed = async () => {\n      try {\n        // Simulate fetch from conversationsDB (replace this with actual API call)\n        const response = await fetch('https://api.example.com/feed');\n        if (!response.ok) {\n          throw new Error('Failed to fetch feed'); // Simulate database error\n        }\n        const data = await response.json();\n        setFeed(data);\n      } catch (error) {\n        setFeed([]); // Simulate no data fetched due to database issue\n      }\n    };\n    fetchFeed();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Content Feed\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }, this), feed === null ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Uh-oh, there seems to be an issue. We're working on getting you connected soon!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 9\n    }, this) : feed.length > 0 ? /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: feed.map((item, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: item.content\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No content available at the moment.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 5\n  }, this);\n}\n_s(FeedPage, \"njma4PmGP/ECTN+ACDy3NaXC4LM=\");\n_c = FeedPage;\nexport default FeedPage;\nvar _c;\n$RefreshReg$(_c, \"FeedPage\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","FeedPage","_s","feed","setFeed","fetchFeed","response","fetch","ok","Error","data","json","error","children","fileName","_jsxFileName","lineNumber","columnNumber","length","map","item","index","content","_c","$RefreshReg$"],"sources":["/Users/baby/react/gnosis-test/src/pages/FeedPage.js"],"sourcesContent":["// src/pages/FeedPage.js\nimport React, { useState, useEffect } from 'react';\n\nfunction FeedPage() {\n  const [feed, setFeed] = useState(null); // Feed starts as null, simulating no database connection\n\n  useEffect(() => {\n    // Simulate a failed database connection or no data fetched\n    const fetchFeed = async () => {\n      try {\n        // Simulate fetch from conversationsDB (replace this with actual API call)\n        const response = await fetch('https://api.example.com/feed');\n        if (!response.ok) {\n          throw new Error('Failed to fetch feed'); // Simulate database error\n        }\n        const data = await response.json();\n        setFeed(data);\n      } catch (error) {\n        setFeed([]); // Simulate no data fetched due to database issue\n      }\n    };\n\n    fetchFeed();\n  }, []);\n\n  return (\n    <div>\n      <h2>Content Feed</h2>\n      {feed === null ? (\n        <p>Uh-oh, there seems to be an issue. We're working on getting you connected soon!</p>\n      ) : feed.length > 0 ? (\n        <ul>\n          {feed.map((item, index) => (\n            <li key={index}>{item.content}</li>\n          ))}\n        </ul>\n      ) : (\n        <p>No content available at the moment.</p>\n      )}\n    </div>\n  );\n}\n\nexport default FeedPage;\n\n"],"mappings":";;AAAA;AACA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnD,SAASC,QAAQA,CAAA,EAAG;EAAAC,EAAA;EAClB,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGP,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;;EAExCC,SAAS,CAAC,MAAM;IACd;IACA,MAAMO,SAAS,GAAG,MAAAA,CAAA,KAAY;MAC5B,IAAI;QACF;QACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,8BAA8B,CAAC;QAC5D,IAAI,CAACD,QAAQ,CAACE,EAAE,EAAE;UAChB,MAAM,IAAIC,KAAK,CAAC,sBAAsB,CAAC,CAAC,CAAC;QAC3C;QACA,MAAMC,IAAI,GAAG,MAAMJ,QAAQ,CAACK,IAAI,CAAC,CAAC;QAClCP,OAAO,CAACM,IAAI,CAAC;MACf,CAAC,CAAC,OAAOE,KAAK,EAAE;QACdR,OAAO,CAAC,EAAE,CAAC,CAAC,CAAC;MACf;IACF,CAAC;IAEDC,SAAS,CAAC,CAAC;EACb,CAAC,EAAE,EAAE,CAAC;EAEN,oBACEL,OAAA;IAAAa,QAAA,gBACEb,OAAA;MAAAa,QAAA,EAAI;IAAY;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,EACpBd,IAAI,KAAK,IAAI,gBACZH,OAAA;MAAAa,QAAA,EAAG;IAA+E;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC,GACpFd,IAAI,CAACe,MAAM,GAAG,CAAC,gBACjBlB,OAAA;MAAAa,QAAA,EACGV,IAAI,CAACgB,GAAG,CAAC,CAACC,IAAI,EAAEC,KAAK,kBACpBrB,OAAA;QAAAa,QAAA,EAAiBO,IAAI,CAACE;MAAO,GAApBD,KAAK;QAAAP,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAoB,CACnC;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACA,CAAC,gBAELjB,OAAA;MAAAa,QAAA,EAAG;IAAmC;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAC1C;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV;AAACf,EAAA,CAtCQD,QAAQ;AAAAsB,EAAA,GAARtB,QAAQ;AAwCjB,eAAeA,QAAQ;AAAC,IAAAsB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}