{"ast":null,"code":"var _jsxFileName = \"/Users/baby/react/gnosis-test/frontend/src/pages/FeedPage.js\",\n  _s = $RefreshSig$();\n// src/pages/FeedPage.js\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport './FeedPage.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction FeedPage() {\n  _s();\n  const [feed, setFeed] = useState(null); // Feed starts as null, simulating no database connection\n\n  useEffect(() => {\n    // Fetch conversations from the Flask API\n    const fetchFeed = async () => {\n      try {\n        const response = await axios.get('http://localhost:5000/api/get_convos'); // Replace localhost if necessary\n        setFeed(response.data);\n      } catch (error) {\n        console.error('Error fetching conversations:', error);\n        setFeed([]); // Simulate no data fetched due to database issue\n      }\n    };\n    fetchFeed();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"feed-container\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"feed-card\",\n      children: feed === null ? /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"feed-message\",\n        children: \"Uh-oh, there seems to be an issue. We're working on getting you connected soon!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 11\n      }, this) : feed.length > 0 ? feed.map((item, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"feed-item\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: [\"Conversation ID: \", item.id]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 32,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"User ID: \", item.user_id]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 33,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Start Date: \", new Date(item.start_date).toLocaleString()]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Last Date: \", new Date(item.last_date).toLocaleString()]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 15\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 13\n      }, this)) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"No content available at the moment.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 5\n  }, this);\n}\n_s(FeedPage, \"njma4PmGP/ECTN+ACDy3NaXC4LM=\");\n_c = FeedPage;\nexport default FeedPage;\n\n/*\n// src/pages/FeedPage.js\nimport './FeedPage.css';  // This imports the CSS for the feed page\nimport React, { useState, useEffect } from 'react';\nimport { FaExclamationTriangle } from 'react-icons/fa'; // Example icon from react-icons (you can use any)\n\nfunction FeedPage() {\n  const [feed, setFeed] = useState(null); // Feed starts as null, simulating no database connection\n\n  useEffect(() => {\n    // Simulate a failed database connection or no data fetched\n    const fetchFeed = async () => {\n      try {\n        // Simulate fetch from conversationsDB (replace this with actual API call)\n        const response = await fetch('https://api.example.com/feed');\n        if (!response.ok) {\n          throw new Error('Failed to fetch feed'); // Simulate database error\n        }\n        const data = await response.json();\n        setFeed(data);\n      } catch (error) {\n        setFeed([]); // Simulate no data fetched due to database issue\n      }\n    };\n\n    fetchFeed();\n  }, []);\n\n  return (\n    <div className=\"feed-container\">\n      <div className=\"feed-card\">\n        {feed === null ? (\n          <div className=\"empty-feed\">\n            <FaExclamationTriangle className=\"empty-icon\" /> {/* Icon above the message }\n            <p className=\"empty-message\">Uh-oh, there seems to be an issue. We're working on getting you connected soon!</p>\n          </div>\n        ) : feed.length > 0 ? (\n          feed.map((item, index) => (\n            <div key={index} className=\"feed-item\">\n              <h3>{item.title}</h3>\n              <p>{item.content}</p>\n            </div>\n          ))\n        ) : (\n          <p className=\"empty-message\">No content available at the moment. But we're working on it!</p>\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default FeedPage; \n\n\n\n\n\n\n\nimport React, { useState, useEffect } from 'react';\n\nfunction FeedPage() {\n  const [feed, setFeed] = useState(null); // Feed starts as null, simulating no database connection\n\n  useEffect(() => {\n    // Simulate a failed database connection or no data fetched\n    const fetchFeed = async () => {\n      try {\n        // Simulate fetch from conversationsDB (replace this with actual API call)\n        const response = await fetch('https://api.example.com/feed');\n        if (!response.ok) {\n          throw new Error('Failed to fetch feed'); // Simulate database error\n        }\n        const data = await response.json();\n        setFeed(data);\n      } catch (error) {\n        setFeed([]); // Simulate no data fetched due to database issue\n      }\n    };\n\n    fetchFeed();\n  }, []);\n\n  return (\n    <div className=\"feed-container\">\n      <div className=\"feed\">\n        {feed === null ? (\n          <p className=\"feed-message\">Uh-oh, there seems to be an issue. We're working on getting you connected soon!</p>\n        ) : feed.length > 0 ? (\n          feed.map((item, index) => (\n            <div key={index} className=\"feed-card\">\n              <h3>{item.title}</h3>\n              <p>{item.content}</p>\n            </div>\n          ))\n        ) : (\n          <p>No content available at the moment.</p>\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default FeedPage; */\nvar _c;\n$RefreshReg$(_c, \"FeedPage\");","map":{"version":3,"names":["React","useState","useEffect","axios","jsxDEV","_jsxDEV","FeedPage","_s","feed","setFeed","fetchFeed","response","get","data","error","console","className","children","fileName","_jsxFileName","lineNumber","columnNumber","length","map","item","index","id","user_id","Date","start_date","toLocaleString","last_date","_c","$RefreshReg$"],"sources":["/Users/baby/react/gnosis-test/frontend/src/pages/FeedPage.js"],"sourcesContent":["// src/pages/FeedPage.js\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport './FeedPage.css';\n\nfunction FeedPage() {\n  const [feed, setFeed] = useState(null); // Feed starts as null, simulating no database connection\n\n  useEffect(() => {\n    // Fetch conversations from the Flask API\n    const fetchFeed = async () => {\n      try {\n        const response = await axios.get('http://localhost:5000/api/get_convos'); // Replace localhost if necessary\n        setFeed(response.data);\n      } catch (error) {\n        console.error('Error fetching conversations:', error);\n        setFeed([]); // Simulate no data fetched due to database issue\n      }\n    };\n\n    fetchFeed();\n  }, []);\n\n  return (\n    <div className=\"feed-container\">\n      <div className=\"feed-card\">\n        {feed === null ? (\n          <p className=\"feed-message\">Uh-oh, there seems to be an issue. We're working on getting you connected soon!</p>\n        ) : feed.length > 0 ? (\n          feed.map((item, index) => (\n            <div key={index} className=\"feed-item\">\n              <h3>Conversation ID: {item.id}</h3>\n              <p>User ID: {item.user_id}</p>\n              <p>Start Date: {new Date(item.start_date).toLocaleString()}</p>\n              <p>Last Date: {new Date(item.last_date).toLocaleString()}</p>\n            </div>\n          ))\n        ) : (\n          <p>No content available at the moment.</p>\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default FeedPage;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/*\n// src/pages/FeedPage.js\nimport './FeedPage.css';  // This imports the CSS for the feed page\nimport React, { useState, useEffect } from 'react';\nimport { FaExclamationTriangle } from 'react-icons/fa'; // Example icon from react-icons (you can use any)\n\nfunction FeedPage() {\n  const [feed, setFeed] = useState(null); // Feed starts as null, simulating no database connection\n\n  useEffect(() => {\n    // Simulate a failed database connection or no data fetched\n    const fetchFeed = async () => {\n      try {\n        // Simulate fetch from conversationsDB (replace this with actual API call)\n        const response = await fetch('https://api.example.com/feed');\n        if (!response.ok) {\n          throw new Error('Failed to fetch feed'); // Simulate database error\n        }\n        const data = await response.json();\n        setFeed(data);\n      } catch (error) {\n        setFeed([]); // Simulate no data fetched due to database issue\n      }\n    };\n\n    fetchFeed();\n  }, []);\n\n  return (\n    <div className=\"feed-container\">\n      <div className=\"feed-card\">\n        {feed === null ? (\n          <div className=\"empty-feed\">\n            <FaExclamationTriangle className=\"empty-icon\" /> {/* Icon above the message }\n            <p className=\"empty-message\">Uh-oh, there seems to be an issue. We're working on getting you connected soon!</p>\n          </div>\n        ) : feed.length > 0 ? (\n          feed.map((item, index) => (\n            <div key={index} className=\"feed-item\">\n              <h3>{item.title}</h3>\n              <p>{item.content}</p>\n            </div>\n          ))\n        ) : (\n          <p className=\"empty-message\">No content available at the moment. But we're working on it!</p>\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default FeedPage; \n\n\n\n\n\n\n\nimport React, { useState, useEffect } from 'react';\n\nfunction FeedPage() {\n  const [feed, setFeed] = useState(null); // Feed starts as null, simulating no database connection\n\n  useEffect(() => {\n    // Simulate a failed database connection or no data fetched\n    const fetchFeed = async () => {\n      try {\n        // Simulate fetch from conversationsDB (replace this with actual API call)\n        const response = await fetch('https://api.example.com/feed');\n        if (!response.ok) {\n          throw new Error('Failed to fetch feed'); // Simulate database error\n        }\n        const data = await response.json();\n        setFeed(data);\n      } catch (error) {\n        setFeed([]); // Simulate no data fetched due to database issue\n      }\n    };\n\n    fetchFeed();\n  }, []);\n\n  return (\n    <div className=\"feed-container\">\n      <div className=\"feed\">\n        {feed === null ? (\n          <p className=\"feed-message\">Uh-oh, there seems to be an issue. We're working on getting you connected soon!</p>\n        ) : feed.length > 0 ? (\n          feed.map((item, index) => (\n            <div key={index} className=\"feed-card\">\n              <h3>{item.title}</h3>\n              <p>{item.content}</p>\n            </div>\n          ))\n        ) : (\n          <p>No content available at the moment.</p>\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default FeedPage; */\n\n\n"],"mappings":";;AAAA;AACA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAO,gBAAgB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExB,SAASC,QAAQA,CAAA,EAAG;EAAAC,EAAA;EAClB,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGR,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;;EAExCC,SAAS,CAAC,MAAM;IACd;IACA,MAAMQ,SAAS,GAAG,MAAAA,CAAA,KAAY;MAC5B,IAAI;QACF,MAAMC,QAAQ,GAAG,MAAMR,KAAK,CAACS,GAAG,CAAC,sCAAsC,CAAC,CAAC,CAAC;QAC1EH,OAAO,CAACE,QAAQ,CAACE,IAAI,CAAC;MACxB,CAAC,CAAC,OAAOC,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,+BAA+B,EAAEA,KAAK,CAAC;QACrDL,OAAO,CAAC,EAAE,CAAC,CAAC,CAAC;MACf;IACF,CAAC;IAEDC,SAAS,CAAC,CAAC;EACb,CAAC,EAAE,EAAE,CAAC;EAEN,oBACEL,OAAA;IAAKW,SAAS,EAAC,gBAAgB;IAAAC,QAAA,eAC7BZ,OAAA;MAAKW,SAAS,EAAC,WAAW;MAAAC,QAAA,EACvBT,IAAI,KAAK,IAAI,gBACZH,OAAA;QAAGW,SAAS,EAAC,cAAc;QAAAC,QAAA,EAAC;MAA+E;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CAAC,GAC7Gb,IAAI,CAACc,MAAM,GAAG,CAAC,GACjBd,IAAI,CAACe,GAAG,CAAC,CAACC,IAAI,EAAEC,KAAK,kBACnBpB,OAAA;QAAiBW,SAAS,EAAC,WAAW;QAAAC,QAAA,gBACpCZ,OAAA;UAAAY,QAAA,GAAI,mBAAiB,EAACO,IAAI,CAACE,EAAE;QAAA;UAAAR,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAK,CAAC,eACnChB,OAAA;UAAAY,QAAA,GAAG,WAAS,EAACO,IAAI,CAACG,OAAO;QAAA;UAAAT,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eAC9BhB,OAAA;UAAAY,QAAA,GAAG,cAAY,EAAC,IAAIW,IAAI,CAACJ,IAAI,CAACK,UAAU,CAAC,CAACC,cAAc,CAAC,CAAC;QAAA;UAAAZ,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eAC/DhB,OAAA;UAAAY,QAAA,GAAG,aAAW,EAAC,IAAIW,IAAI,CAACJ,IAAI,CAACO,SAAS,CAAC,CAACD,cAAc,CAAC,CAAC;QAAA;UAAAZ,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC;MAAA,GAJrDI,KAAK;QAAAP,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAKV,CACN,CAAC,gBAEFhB,OAAA;QAAAY,QAAA,EAAG;MAAmC;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG;IAC1C;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACE;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV;AAACd,EAAA,CAtCQD,QAAQ;AAAA0B,EAAA,GAAR1B,QAAQ;AAwCjB,eAAeA,QAAQ;;AAgBvvGA,IAAA0B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}