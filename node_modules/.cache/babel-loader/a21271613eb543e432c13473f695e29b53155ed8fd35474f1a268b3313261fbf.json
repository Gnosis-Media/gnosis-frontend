{"ast":null,"code":"var _jsxFileName = \"/Users/baby/react/gnosis-test/src/pages/FeedPage.js\",\n  _s = $RefreshSig$();\n// src/pages/FeedPage.js\n// src/pages/FeedPage.js\nimport './FeedPage.css'; // This imports the CSS for the feed page\nimport React, { useState, useEffect } from 'react';\nimport { FaExclamationTriangle } from 'react-icons/fa'; // Example icon from react-icons (you can use any)\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction FeedPage() {\n  _s();\n  const [feed, setFeed] = useState(null); // Feed starts as null, simulating no database connection\n\n  useEffect(() => {\n    // Simulate a failed database connection or no data fetched\n    const fetchFeed = async () => {\n      try {\n        // Simulate fetch from conversationsDB (replace this with actual API call)\n        const response = await fetch('https://api.example.com/feed');\n        if (!response.ok) {\n          throw new Error('Failed to fetch feed'); // Simulate database error\n        }\n        const data = await response.json();\n        setFeed(data);\n      } catch (error) {\n        setFeed([]); // Simulate no data fetched due to database issue\n      }\n    };\n    fetchFeed();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"feed-container\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"feed-card\",\n      children: feed === null ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"empty-feed\",\n        children: [/*#__PURE__*/_jsxDEV(FaExclamationTriangle, {\n          className: \"empty-icon\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 13\n        }, this), \" \", /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"empty-message\",\n          children: \"Uh-oh, there seems to be an issue. We're working on getting you connected soon!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 11\n      }, this) : feed.length > 0 ? feed.map((item, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"feed-item\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: item.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: item.content\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 15\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 13\n      }, this)) : /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"empty-message\",\n        children: \"No content available at the moment.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 5\n  }, this);\n}\n_s(FeedPage, \"njma4PmGP/ECTN+ACDy3NaXC4LM=\");\n_c = FeedPage;\nexport default FeedPage;\n\n/*\nimport React, { useState, useEffect } from 'react';\n\nfunction FeedPage() {\n  const [feed, setFeed] = useState(null); // Feed starts as null, simulating no database connection\n\n  useEffect(() => {\n    // Simulate a failed database connection or no data fetched\n    const fetchFeed = async () => {\n      try {\n        // Simulate fetch from conversationsDB (replace this with actual API call)\n        const response = await fetch('https://api.example.com/feed');\n        if (!response.ok) {\n          throw new Error('Failed to fetch feed'); // Simulate database error\n        }\n        const data = await response.json();\n        setFeed(data);\n      } catch (error) {\n        setFeed([]); // Simulate no data fetched due to database issue\n      }\n    };\n\n    fetchFeed();\n  }, []);\n\n  return (\n    <div className=\"feed-container\">\n      <div className=\"feed\">\n        {feed === null ? (\n          <p className=\"feed-message\">Uh-oh, there seems to be an issue. We're working on getting you connected soon!</p>\n        ) : feed.length > 0 ? (\n          feed.map((item, index) => (\n            <div key={index} className=\"feed-card\">\n              <h3>{item.title}</h3>\n              <p>{item.content}</p>\n            </div>\n          ))\n        ) : (\n          <p>No content available at the moment.</p>\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default FeedPage; */\nvar _c;\n$RefreshReg$(_c, \"FeedPage\");","map":{"version":3,"names":["React","useState","useEffect","FaExclamationTriangle","jsxDEV","_jsxDEV","FeedPage","_s","feed","setFeed","fetchFeed","response","fetch","ok","Error","data","json","error","className","children","fileName","_jsxFileName","lineNumber","columnNumber","length","map","item","index","title","content","_c","$RefreshReg$"],"sources":["/Users/baby/react/gnosis-test/src/pages/FeedPage.js"],"sourcesContent":["// src/pages/FeedPage.js\n// src/pages/FeedPage.js\nimport './FeedPage.css';  // This imports the CSS for the feed page\nimport React, { useState, useEffect } from 'react';\nimport { FaExclamationTriangle } from 'react-icons/fa'; // Example icon from react-icons (you can use any)\n\nfunction FeedPage() {\n  const [feed, setFeed] = useState(null); // Feed starts as null, simulating no database connection\n\n  useEffect(() => {\n    // Simulate a failed database connection or no data fetched\n    const fetchFeed = async () => {\n      try {\n        // Simulate fetch from conversationsDB (replace this with actual API call)\n        const response = await fetch('https://api.example.com/feed');\n        if (!response.ok) {\n          throw new Error('Failed to fetch feed'); // Simulate database error\n        }\n        const data = await response.json();\n        setFeed(data);\n      } catch (error) {\n        setFeed([]); // Simulate no data fetched due to database issue\n      }\n    };\n\n    fetchFeed();\n  }, []);\n\n  return (\n    <div className=\"feed-container\">\n      <div className=\"feed-card\">\n        {feed === null ? (\n          <div className=\"empty-feed\">\n            <FaExclamationTriangle className=\"empty-icon\" /> {/* Icon above the message */}\n            <p className=\"empty-message\">Uh-oh, there seems to be an issue. We're working on getting you connected soon!</p>\n          </div>\n        ) : feed.length > 0 ? (\n          feed.map((item, index) => (\n            <div key={index} className=\"feed-item\">\n              <h3>{item.title}</h3>\n              <p>{item.content}</p>\n            </div>\n          ))\n        ) : (\n          <p className=\"empty-message\">No content available at the moment.</p>\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default FeedPage;\n\n\n\n\n\n\n/*\nimport React, { useState, useEffect } from 'react';\n\nfunction FeedPage() {\n  const [feed, setFeed] = useState(null); // Feed starts as null, simulating no database connection\n\n  useEffect(() => {\n    // Simulate a failed database connection or no data fetched\n    const fetchFeed = async () => {\n      try {\n        // Simulate fetch from conversationsDB (replace this with actual API call)\n        const response = await fetch('https://api.example.com/feed');\n        if (!response.ok) {\n          throw new Error('Failed to fetch feed'); // Simulate database error\n        }\n        const data = await response.json();\n        setFeed(data);\n      } catch (error) {\n        setFeed([]); // Simulate no data fetched due to database issue\n      }\n    };\n\n    fetchFeed();\n  }, []);\n\n  return (\n    <div className=\"feed-container\">\n      <div className=\"feed\">\n        {feed === null ? (\n          <p className=\"feed-message\">Uh-oh, there seems to be an issue. We're working on getting you connected soon!</p>\n        ) : feed.length > 0 ? (\n          feed.map((item, index) => (\n            <div key={index} className=\"feed-card\">\n              <h3>{item.title}</h3>\n              <p>{item.content}</p>\n            </div>\n          ))\n        ) : (\n          <p>No content available at the moment.</p>\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default FeedPage; */\n\n\n\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}